{
    "docs": [
        {
            "location": "/", 
            "text": "AiC Project\n\n\n\n\n\nAiC is an Open Source project that facilitates Android application\ntesting. It offers many components to achieve Android virtualization\nthat can run applications and tests, allowing a fast feedback for the\napplication developer.\n\n\nTwo different AiC deployments are proposed:\n\n\n\n\nCloud version\n: Android virtualized machines are deployed\nwithin a cloud platform (Open Stack). The user can interact\nwith the Android machine through a web application (also deployed\nwithin the cloud platform).\n\n\nLocal version\n: Android virtualized machines are deployed locally\n(in the user machine) through qemu-kvm/libvirt. The user can interact\nwith the Android machine through NoVNC and AiC CLI.\n\n\n\n\nCloud Version Architecture\n\n\n\n\nThe AiC architecture is divided into four big groups:\n\n\n\n\nBrowser\n: In the browser section we have one component, the \nfrontend\n web application.\n\n\nAiC Test Services (ATS)\n: AiC Services are made of many components.\n\n\nATS-LuaAuth\n: Component responsible for the user authorization.\n\n\nATS-Authentication\n: Component responsible for the user authentication.\n\n\nATS-Kyaraben\n: Component responsible for virtual machine orchestration on the cloud platform (Android machine creation and removal). It also handles the database and data docker containers (project information, APKs, test files, etc).\n\n\nATS-Senza\n: Component that will interact with Android machine emulated sensors and services (GPS, battery, rotation, GSM, etc).\n\n\n\n\n\n\nDocker host\n: There are many services associated to each virtual Android machine created.\n  The docker host will provide containers with these services, needed by the Android machine to work.\n  One of these containers is \nplayer\n, the interface between Android machine and sensors emitters.\n    Another of these containers is \nplayer.camera\n, a component that handles the Android machine camera input.\n    There is also an extra ATS service that runs on the docker host, which is the \nATS-DSLcc\n, a component that parsers the AiC Testing DSL to Java files.\n\n\nOpenStack\n: Cloud service where virtual Android machines are\ndeployed and all services are hosted. The Android machines images are\nbuilt with \nATS-RomBuild\n.\n\n\n\n\nAll these components can be deployed using \nAiC ATS build \n deployment tools\n.\n\n\nDetails about each component can be found on its own documentation and\nproject repository.\n\n\n\n\n\n\n\n\nComponent\n\n\nDocumentation\n\n\nGithub\n\n\n\n\n\n\n\n\n\n\nATS-LuaAuth\n\n\n(NA)\n\n\ngithub\n\n\n\n\n\n\nATS-Authentication\n\n\ndocumentation\n\n\ngithub\n\n\n\n\n\n\nATS-Kyaraben\n\n\ndocumentation\n\n\ngithub\n\n\n\n\n\n\nATS-Senza\n\n\ndocumentation\n\n\ngithub\n\n\n\n\n\n\nplayer\n\n\ndocumentation\n\n\ngithub\n\n\n\n\n\n\nplayer.camera\n\n\ndocumentation\n\n\ngithub\n\n\n\n\n\n\nATS-DSLcc\n\n\ndocumentation\n\n\ngithub\n\n\n\n\n\n\nATS-RomBuild\n\n\ndocumentation\n\n\ngithub\n\n\n\n\n\n\nATS build \n deployment tools\n\n\ndocumentation\n\n\ngithub\n\n\n\n\n\n\n\n\nLocal Version Architecture\n\n\n\n\nAiC Local can be imagined as a simplified version of the Cloud\nservice. It uses the same Android images as in the cloud version but\nall services will run in the user machine.\n\n\nWe recommend the installation in a modern Linux distribution and it\nshould be able to run Docker 1.10+, and qemu-kvm through libvirt. The\ninstallation details are available at\n\ndocumentation\n\nand\n\ngithub repository\n.\n\n\nOpenGapps\n\n\nSome Android applications depend on Google Apps (GApps).\nInstructions on how to install GApps in the AiC Android roms are available in the \n\ndocumentation\n \nand \n\ngithub repository\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#aic-project", 
            "text": "AiC is an Open Source project that facilitates Android application\ntesting. It offers many components to achieve Android virtualization\nthat can run applications and tests, allowing a fast feedback for the\napplication developer.  Two different AiC deployments are proposed:   Cloud version : Android virtualized machines are deployed\nwithin a cloud platform (Open Stack). The user can interact\nwith the Android machine through a web application (also deployed\nwithin the cloud platform).  Local version : Android virtualized machines are deployed locally\n(in the user machine) through qemu-kvm/libvirt. The user can interact\nwith the Android machine through NoVNC and AiC CLI.", 
            "title": "AiC Project"
        }, 
        {
            "location": "/#cloud-version-architecture", 
            "text": "The AiC architecture is divided into four big groups:   Browser : In the browser section we have one component, the  frontend  web application.  AiC Test Services (ATS) : AiC Services are made of many components.  ATS-LuaAuth : Component responsible for the user authorization.  ATS-Authentication : Component responsible for the user authentication.  ATS-Kyaraben : Component responsible for virtual machine orchestration on the cloud platform (Android machine creation and removal). It also handles the database and data docker containers (project information, APKs, test files, etc).  ATS-Senza : Component that will interact with Android machine emulated sensors and services (GPS, battery, rotation, GSM, etc).    Docker host : There are many services associated to each virtual Android machine created.\n  The docker host will provide containers with these services, needed by the Android machine to work.\n  One of these containers is  player , the interface between Android machine and sensors emitters.\n    Another of these containers is  player.camera , a component that handles the Android machine camera input.\n    There is also an extra ATS service that runs on the docker host, which is the  ATS-DSLcc , a component that parsers the AiC Testing DSL to Java files.  OpenStack : Cloud service where virtual Android machines are\ndeployed and all services are hosted. The Android machines images are\nbuilt with  ATS-RomBuild .   All these components can be deployed using  AiC ATS build   deployment tools .  Details about each component can be found on its own documentation and\nproject repository.     Component  Documentation  Github      ATS-LuaAuth  (NA)  github    ATS-Authentication  documentation  github    ATS-Kyaraben  documentation  github    ATS-Senza  documentation  github    player  documentation  github    player.camera  documentation  github    ATS-DSLcc  documentation  github    ATS-RomBuild  documentation  github    ATS build   deployment tools  documentation  github", 
            "title": "Cloud Version Architecture"
        }, 
        {
            "location": "/#local-version-architecture", 
            "text": "AiC Local can be imagined as a simplified version of the Cloud\nservice. It uses the same Android images as in the cloud version but\nall services will run in the user machine.  We recommend the installation in a modern Linux distribution and it\nshould be able to run Docker 1.10+, and qemu-kvm through libvirt. The\ninstallation details are available at documentation \nand github repository .", 
            "title": "Local Version Architecture"
        }, 
        {
            "location": "/#opengapps", 
            "text": "Some Android applications depend on Google Apps (GApps).\nInstructions on how to install GApps in the AiC Android roms are available in the  documentation  \nand  github repository .", 
            "title": "OpenGapps"
        }
    ]
}